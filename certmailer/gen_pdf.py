# Copyright 2013-2018 Facundo Batista

# This program is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License version 3, as published
# by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranties of
# MERCHANTABILITY, SATISFACTORY QUALITY, or FITNESS FOR A PARTICULAR
# PURPOSE.  See the GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# For further info, check  http://github.com/facundobatista/certg

import os
import re
import subprocess
import tempfile
import uuid


class GenPDF:
    """Adapted """

    def __init__(self, svg_source, images=None):
        """Every process maked one time, at start of object."""
        with open(svg_source, "rt", encoding="utf8") as fh:
            self.content_base = fh.read()

        if images is not None:
            for image in images:
                place_id = image["placement_rectangle_id"]
                self.content_base, replacement_variable = self._pre_process_image(
                    self.content_base, place_id
                )
                image["replacement_variable"] = replacement_variable
        self.images = images

    def _get_gs_cmd(self, srcpath, dstpath):
        """Build the command for Ghoscript to optimize a PDF."""
        cmd = [
            "/usr/bin/gs",
            "-sDEVICE=pdfwrite",
            "-dCompatibilityLevel=1.4",
            "-dPDFSETTINGS=/default",
            "-dNOPAUSE",
            "-dBATCH",
            "-dQUIET",
            "-sOutputFile={}".format(dstpath),
            srcpath,
        ]
        return cmd

    def _get_inkscape_cmd(self, srcpath, dstpath):
        """Build the command for Inkscape to convert the SVG into PDF."""
        cmd = [
            "inkscape",
            "--export-text-to-path",
            "--export-pdf={}".format(dstpath),
            srcpath,
        ]
        return cmd

    def _pre_process_image(self, content, place_id):
        """Preprocess a SVG changing a rect for an image, to be filled by replacing a specific var."""
        replace_var = uuid.uuid4().hex

        def mutate(match):
            params = match.groups()[0].split()
            if not any(place_id in param for param in params):
                # not the object we were searching for mutation, return the original sequence
                return match.string[slice(*match.span())]

            params = [
                p
                for p in params
                if p.startswith(("id=", "width=", "height=", "x=", "y="))
            ]
            params.append('xlink:href="file://{}"'.format(replace_var))
            params.append('preserveAspectRatio="none"')
            return "<image {} />".format(" ".join(params))

        content = re.sub("<rect(.*?)>", mutate, content, flags=re.DOTALL)
        return content, replace_var

    def process(self, result_filename, replace_info, pdf_optimized=False):
        """
        Gen PDF. PDF is from a key in replace_info, replacing data into the
        svg_source, and naming each PDF according to result_*.

        If pdf_optimized in True, Ghostscript will be called to improve the final file.
        """

        content = self.content_base
        for attr in replace_info.keys():
            value = replace_info.get(attr)
            if value is None or not isinstance(value, str):
                # both because the attr is not supplied, or supplied empty
                value = ""
            content = content.replace("{{" + attr + "}}", value)

        # replace image, if any
        if self.images is not None:
            for image in self.images:
                image_path_variable = image["path_variable"]
                image_path = os.path.abspath(replace_info[image_path_variable])
                replacement_variable = image["replacement_variable"]
                content = content.replace(replacement_variable, image_path)

        # write the new svg
        _, tmpfile = tempfile.mkstemp(suffix=".svg")
        with open(tmpfile, "wt", encoding="utf8") as fh:
            fh.write(content)

        # generate PDF
        final_pdf = "{}.pdf".format(result_filename)
        pdf_by_gs = pdf_by_inkscape = final_pdf
        if pdf_optimized:
            _, pdf_by_inkscape = tempfile.mkstemp(suffix=".pdf")

        cmd = self._get_inkscape_cmd(tmpfile, pdf_by_inkscape)
        subprocess.check_call(cmd)
        os.remove(tmpfile)

        if pdf_optimized:
            # optimize the PDF generated by inkscape
            cmd = self._get_gs_cmd(pdf_by_inkscape, pdf_by_gs)
            subprocess.check_call(cmd)
            os.remove(pdf_by_inkscape)

        return final_pdf
